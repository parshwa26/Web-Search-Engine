https://t.co/qqsunYb4Nw
How GIN Indices Can Make Your Postgres Queries 15x Faster Sign in Data Science Machine Learning Programming Visualization AI Video About Contribute How GIN Indices Can Make Your Postgres Queries 15x Faster With query examples you can run on your laptop Chris Follow Mar 27 · 3 min read Adding an index has improved query time from minutes to milliseconds more than I can count during my career. As data scientists, we spend A LOT of time querying and analyzing data so we should know how to do it efficiently. Postgres has 6 index types. Today we’re covering GIN indices. We’re going to seed a database with increasingly large amounts of data and compare query time with and without a GIN index. You’ll benefit more if you follow along in your SQL editor (I’m using DBeaver). What’s an Index? A data structure that makes retrieving data from a database more efficient at the cost of slower insert speeds and more disk space. What’s a GIN Index? GIN stands for Generalized Inverted Index. In general, an inverted index maps words to its position in a table. Below is an abstraction I drew of an inverted index. If we wanted to find sentences in the table with the word lazy without an index, we’d need to iterate over every sentence in the table looking for matches. But by adding an index, we know in advance which sentences contain the word lazy and can load those directly. This makes things a lot faster! This type of index is good for querying composite datatypes, meaning they store more than 1 value. Examples are hStores, Arrays, Ranges and JSONs. How much faster are GIN Indices? Let’s find out. Start by creating a table and populating it with data. # create table CREATE TABLE articles (   body text,   body_indexed text );# add an index CREATE INDEX articles_search_idx ON articles USING gin (body_indexed gin_trgm_ops);# populate table with data INSERT INTO articles SELECT   md5(random()::text),   md5(random()::text) from (   SELECT * FROM generate_series(1,100000) AS id ) AS x; Awesome we now have a table called articles with 100k records, and 2 columns of random strings. If you’re curious about the index. We didn’t index strings directly but used Postgres’s gin_trgm_ops to create trigrams (think ngrams in sklearn) from each string, and indexed that. The table looks like this in my SQL editor. I’m going to track query time after each 100k new records I add. I’ll be running these queries. SELECT count(*) FROM articles where body ilike '%abc%'; SELECT count(*) FROM articles where body_indexed ilike'%abc%'; The same or a similar query run multiple times can vary in run time. This is due varying system load on your machine and changing query plans. For our purposes ignore fluctuations and look at general trends of time differences. Wow! That’s a big difference on only 2 million records. Imagine we were querying on a database of billions. Conclusion Most of the time we just need to add a B-tree index. But sometimes another index like GIN is more appropriate. Just knowing that other index types are out there can be useful when you eventually come across a problem B-trees don’t solve. Have you come across any cool use cases of indices or applied them in interesting ways? Towards Data Science A Medium publication sharing concepts, ideas, and codes. Follow 22 Data Science Database Sql Postgres Software Engineering 22 claps Written by Chris Follow Data Scientist. Full Stack Engineer. Founder. Toronto. Open to consulting and new opportunities. https://www.linkedin.com/in/chris-i-a1b69212/ Follow Towards Data Science Follow A Medium publication sharing concepts, ideas, and codes. Follow Write the first response More From Medium More from Towards Data Science More from Towards Data Science from sklearn import * Conor Lazarou in Towards Data Science Mar 22 · 9 min read 2.5K More from Towards Data Science More from Towards Data Science Top 3 Python Functions You Don’t Know About (Probably) Dario Rade?i? in Towards Data Science Mar 14 · 4 min read 4.3K More from Towards Data Science More from Towards Data Science Don’t learn machine learning Caleb Kaiser in Towards Data Science Mar 19 · 4 min read 2.4K Discover MediumWelcome to a place where words matter. On Medium, smart voices and original ideas take center stage - with no ads in sight. Watch Make Medium yoursFollow all the topics you care about, and we’ll deliver the best stories for you to your homepage and inbox. Explore Become a memberGet unlimited access to the best stories on Medium — and support writers while you’re at it. Just $5/month. Upgrade AboutHelpLegal
