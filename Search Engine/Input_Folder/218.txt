https://t.co/V6liqmT28Y
Binomial Distribution Tutorial for Data Scientists - Towards Data Science Sign in Data Science Machine Learning Programming Visualization AI Video About Contribute Binomial Distribution Tutorial for Data Scientists Sharpen your stat skills with easy python code! Lucas Morato Follow Mar 27 · 4 min read Statistics can be fun without all those dices! Source When learning data science, very often we hear about the importance of studying statistics properly, with special focus into probability, and there’s no way to deny the importance of this knowledge when running Machine Learning models and validation tests. However, it can be hard to assimilate it if you are new to stats, or if you were better in history than mathematics during high school. In this tutorial, I’ll guide you through an example of how to run a Binomial Distribution simulation in python, making an Empirical Cumulative Distribution Function plot at the end. I’m not covering the foundation concepts of this subject here, so if you’re not familiar with Binomial Distribution, you can check first this excellent article. That said, let’s get started! Oh, but before, you’re welcome to download the notebook with all the code I’m using by clicking here. First: define a problem Statistical examples can be very abstract, after all, what is a “successful case”, and why those people are obsessed with flipping coins and rolling dices? I believe that the best way to learn something is with problems/situations that you can easily relate to. Let’s say we are doing an electoral pool. We will ask 10 random people if they are voting Trump for president in 2020. We will repeat this trail with another group of 10 people again and again until we have the answers of 100 thousand groups. Our goal is to discover the probability of 6 people or more in each group to answer yes. But wait, instead of taking your pen and paper and run out to start annoying people on the streets, let’s use the power of python to simulate that instead. We begin by checking if we have all the elements of a Binomial Distribution case: Yes or No question (hence the “binomial” part): the question is if they will vote or not for Trump, so we’re fine. Independent results: the answer of a person doesn’t affect the next answer. N, P and Size. We have the the number of trails (n), 10 people, the probability of each person to answer yes (p), let’s use 50%, and the size of our experiment, 100 thousand groups. Perfect, so what we do first? Simulate the answers! We can do that using np.random.random() function. It generates a random number between 0 and 1, so we will consider all numbers that are lower than 0.5 as a NO, and numbers equal or higher than 0.5 will be considered YES. Let’s visualize how to generate the answers for a group of 10 people: > [0.9600173  0.69951205 0.99986729 0.2200673  0.36105635 0.73984099  0.99645573 0.31634698 0.13654458 0.38398001] > [ True  True  True False False  True  True False False False] > Total number of positive answers for this group: 5 So from our first group of 10 people, 5 answered that they will vote for Trump. Now we just need to reproduce the same logic one hundred thousand times! To do that we need to do a loop and use the function np.random.binomial(), which needs the arguments: n (number of trails, or in our case the number of people in each group), p (probability of a positive answer) and size (how many times we want to run it): > There's a probability of 37.69% of Trump getting 6 or more supporters in a group. What that means? It’s important to understand how to interpret this result, as it’s not about if Trump will be elected or not, but instead it shows the probability of, given a random group of 10 people, how likely is for 6 or more persons to answer yes for the question “are you going to vote in Trump for president?”. Given the complex electoral system on the US, this simulation could be used across different electoral districts, where the initial probability varies. We are assuming there’s a 50/50 chance for a yes or no answer, but this scenario would change if you are in Florida or California, right? By changing the probability (p) of getting a positive answer, look how much the results change: For p=0.4 : 16.76% chance of getting 6 or more supporters; For p=0.6 : 63.27% chance of getting 6 or more supporters. Empirical Cumulative Distribution Function (ECDF) One of the coolest ways to visualize a binomial distribution is to plot a ECDF to check the distribution of positive answers. It can be done with a simple plt.scatter(), by putting in the y axis the density of the distribution, which ranges from 0 to 1 (100% of samples), and in the x axis, the number of positive answers we have in each group: ECDF plots for n= 0.4, 0.5 and 0.6. Note how the curve changes. How to read an ECDF plot? Take as reference the value of 6 on the x axis. On the first plot on the left, with p=0.4, the number 6 is slightly above the value of 0.8, which means that more than 80% of the distribution is under that value, and less than 20% is above. That matches perfectly with our calculations of p=0.4, or 16.76%, and the the same is true for the other 2 plots. Take few minutes to compare the plots and values. Once you get the idea, you’ll notice how powerful and simple to understand the ECDF plot is. Conclusion On this practical tutorial I wanted to take you out of the all-the-same kind of examples we have when learning Binomial Distribution, and also show you how to make your first simulation using different p values and how to visualize the results with ECDF plots. I hope this post helps you to sharpen your statistical skills, and please feel free to share your thoughts on the comments. Towards Data Science A Medium publication sharing concepts, ideas, and codes. Follow 9 Statistics Data Analysis Data Science Python Tutorial 9 claps Written by Lucas Morato Follow Data Analyst, focused in Data Visualization and Financial Analysis. LinkedIn: linkedin.com/hey-i-am-lucas/ Follow Towards Data Science Follow A Medium publication sharing concepts, ideas, and codes. Follow Write the first response More From Medium More from Towards Data Science More from Towards Data Science from sklearn import * Conor Lazarou in Towards Data Science Mar 22 · 9 min read 2.5K More from Towards Data Science More from Towards Data Science Top 3 Python Functions You Don’t Know About (Probably) Dario Rade?i? in Towards Data Science Mar 14 · 4 min read 4.3K More from Towards Data Science More from Towards Data Science Don’t learn machine learning Caleb Kaiser in Towards Data Science Mar 19 · 4 min read 2.4K Discover MediumWelcome to a place where words matter. On Medium, smart voices and original ideas take center stage - with no ads in sight. Watch Make Medium yoursFollow all the topics you care about, and we’ll deliver the best stories for you to your homepage and inbox. Explore Become a memberGet unlimited access to the best stories on Medium — and support writers while you’re at it. Just $5/month. Upgrade AboutHelpLegal
