https://towardsdatascience.com/8-useful-tree-data-structures-worth-knowing-8532c7231e8c?source=user_profile---------6-----------------------#--responses
8 Useful Tree Data Structures Worth Knowing - Towards Data Science Sign in Data Science Machine Learning Programming Visualization AI Video About Contribute 8 Useful Tree Data Structures Worth Knowing An overview of 8 different tree data structures Vijini Mallawaarachchi Follow Mar 11 · 6 min read What comes to your mind when you think of a tree? Roots, branches and leaves? A big oak tree with roots, branches and leaves may come to your mind. Similarly, in computer science, the tree data structure has roots, branches and leaves, but it is drawn upside-down. A tree is a hierarchical data structure which can represent relationships between different nodes. In this article, I will briefly introduce you to 8 types of tree data structures. Properties of a Tree A tree can contain no nodes or it can contain one special node called the root with zero or more subtrees. Every edge of the tree is directly or indirectly originated from the root. Every child has only one parent, but one parent can have many children. Fig 1. Terminology of trees In this article, I will be briefly explaining the following 10 tree data structures with their usage. General tree Binary tree Binary search tree AVL tree Red-black tree Splay tree Treap B-tree 1. General Tree A general tree is a tree data structure where there are no constraints on the hierarchical structure. Properties Follow properties of a tree. A node can have any number of children. Fig 2. General tree Usage Used to store hierarchical data such as folder structures. 1. Binary Tree A binary tree is a tree data structure where the following properties can be found. Properties Follow properties of a tree. A node can have at most two child nodes (children). These two child nodes are known as the left child and right child. Fig 3. Binary tree Usage Used by compilers to build syntax trees. Used to implement expression parsers and expression solvers. Used to store router-tables in routers. 3. Binary Search Tree A binary search tree is a more constricted extension of a binary tree. Properties Follow properties of a binary tree. Has a unique property known as the binary-search-tree property. This property states that the value (or key) of the left child of a given node should be less than or equal to the parent value and the value of the right child should be greater than or equal to the parent value. Fig 4. Binary search tree Usage Used to implement simple sorting algorithms. Can be used as priority queues. Used in many search applications where data are constantly entering and leaving. 4. AVL tree An AVL tree is a self-balancing binary search tree. This is the first tree introduced which automatically balances its height. Properties Follow properties of binary search trees. Self-balancing. Each node stores a value called a balance factor which is the difference in height between its left subtree and right subtree. All the nodes must have a balance factor of -1, 0 or 1. After performing insertions or deletions, if there is at least one node that does not have a balance factor of -1, 0 or 1 then rotations should be performed to balance the tree (self-balancing). You can read more about the rotation operations in my previous article from here. Fig 5. AVL tree Usage Used in situations where frequent insertions are involved. Used in Memory management subsystem of the Linux kernel to search memory regions of processes during preemption. 5. Red-black tree A red-black tree is a self-balancing binary search tree, where each node has a colour; red or black. The colours of the nodes are used to make sure that the tree remains approximately balanced during insertions and deletions. Properties Follow properties of binary search trees. Self-balancing. Each node is either red or black. The root is black (sometimes omitted). All leaves (denoted as NIL) are black. If a node is red, then both its children are black. Every path from a given node to any of its leaf nodes must go through the same number of black nodes. Fig 6. AVL tree Usage As a base for data structures used in computational geometry. Used in the Completely Fair Scheduler used in current Linux kernels. Used in the epoll system call implementation of Linux kernel. 6. Splay tree A splay tree is a self-balancing binary search tree. Properties Follow properties of binary search trees. Self-balancing. Recently accessed elements are quick to access again. After performing a search, insertion or deletion, splay trees perform an action called splaying where the tree is rearranged (using rotations) so that the particular element is placed at the root of the tree. Fig 7. Splay tree search Usage Used to implement caches Used in garbage collectors. Used in data compression 7. Treap A treap (the name derived from tree + heap) is a binary search tree. Properties Each node has two values; a key and a priority. The keys follow the binary-search-tree property. The priorities (which are random values) follow the heap property. Fig 8. Treap (red coloured alphabetic keys follow BST property and blue coloured numeric values follow max heap order) Usage Used to maintain authorization certificates in public-key cryptosystems. Can be used to perform fast set operations. 8. B-tree B tree is a self-balancing search tree and contains multiple nodes which keep data in sorted order. Each node has 2 or more children and consists of multiple keys. Properties Every node x has the following: — x.n (the number of keys) — x.key? (the keys stored in ascending order) — x.leaf (whether x is a leaf or not) 2. Every node x has (x.n + 1) children. 3. The keys x.key? separate the ranges of keys stored in each sub-tree. 4. All the leaves have the same depth, which is the tree height. 5. Nodes have lower and upper bounds on the number of keys that can be stored. Here we consider a value t?2, called minimum degree (or branching factor) of the B tree. — The root must have at least one key. — Every other node must have at least (t-1) keys and at most (2t-1) keys. Hence, every node will have at least t children and at most 2t children. We say the node is full if it has (2t-1) keys. Fig 9. B-tree Usage Used in database indexing to speed up the search. Used in file systems to implement directories. Final Thoughts A cheat sheet for the time complexities of the data structure operations can be found in this link. I hope you found this article useful as a simple introduction to tree structures. I would love to hear your thoughts. ? Stay tuned for upcoming articles on more data structures. If you haven’t read my previous articles on data structures, have a look at them from the links below. 8 Common Data Structures every Programmer must know Data Structures are a specialized means of organizing and storing data in computers in such a way that we can perform… towardsdatascience.com Self-Balancing Binary Search Trees 101 Introduction to Self-Balancing Binary Search Trees towardsdatascience.com Thanks a lot for reading! Cheers! ? References [1] Introduction to Algorithms (Third Edition) by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Livest and Clifford Stein. [2] https://en.wikipedia.org/wiki/List_of_data_structures Towards Data Science A Medium publication sharing concepts, ideas, and codes. Follow 197 Data Structures Algorithms Data Science Computer Science Towards Data Science 197 claps Written by Vijini Mallawaarachchi Follow PhD Student at Australian National University | Loves Bioinformatics, Data Science, Music & Astronomy Follow Towards Data Science Follow A Medium publication sharing concepts, ideas, and codes. Follow See responses (1) More From Medium More from Towards Data Science More from Towards Data Science from sklearn import * Conor Lazarou in Towards Data Science Mar 22 · 9 min read 2.5K More from Towards Data Science More from Towards Data Science Top 3 Python Functions You Don’t Know About (Probably) Dario Rade?i? in Towards Data Science Mar 14 · 4 min read 4.3K More from Towards Data Science More from Towards Data Science Don’t learn machine learning Caleb Kaiser in Towards Data Science Mar 19 · 4 min read 2.4K Discover MediumWelcome to a place where words matter. On Medium, smart voices and original ideas take center stage - with no ads in sight. Watch Make Medium yoursFollow all the topics you care about, and we’ll deliver the best stories for you to your homepage and inbox. Explore Become a memberGet unlimited access to the best stories on Medium — and support writers while you’re at it. Just $5/month. Upgrade AboutHelpLegal
