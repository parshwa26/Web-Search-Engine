https://towardsdatascience.com/net-current-asset-value-per-share-with-python-e6a31a8b6491?source=collection_category---4------4-----------------------
Net Current Asset Value per Share with Python - Towards Data Science Sign in Data Science Machine Learning Programming Visualization AI Video About Contribute Net Current Asset Value per Share with Python Screening NASDAQ to find out cheap companies Jose Manu (CodingFun) Follow Mar 19 · 5 min read Net Current Asset Value per Share (NCAVPS) is one of the measures used by Benjamin Graham to identify attractive stocks. He was actively searching for stocks trading below its Net Current Asset Value per Share. During this post, we are going to build a script to calculate Net Current Asset Value per Share with Python and automatically identify stocks trading below its NCAVPS. Photo by jiawei cui from Pexels What is Net Current Asset Value per Share (NCAVPS)? NCAVPS is a measure to value companies that differs from other traditional valuation methods that look more to different metrics such earnings. NACVPS takes current assets minus total liabilities and the result is divided by the total number of shares outstanding. NCAVPS = (Current Assets — Total Liabilities) / Shares Outstanding When a stock is trading below the NCAVPS value, it means that the firm is trading below its liquidation value and therefore it may be seen as a good buying opportunity. Graham was interested in companies trading for less than 66% of its NCAVPS. Let’s build an algorithm to have Python finding such companies for us. Net Current Asset Value per Shares with Python Let’s build now a script that will automate below financial analysis for us: Search for 100 stocks in the Nasdaq composite and add to a Python list each stock ticker. Use the ticker to extract from a free API, current assets, total liabilities and shares outstanding for each of the stocks found in point one Calculate Net Current Asset Value per Share (NCAVPS) Check if company is trading for less than 67% of its NCAVPS If trading for less than 67% of its NCAVPS, add the stock to a Python dictionary To search for the companies trading in Nasdaq and obtain financial statement information, we will use an API with plenty of free financial data. First thing we do after importing all packages is to make an http request to get 100 stocks trading in the NASDAQ composite. You can see the sample response in the following link. The response is a list of dictionaries. Each dictionary includes information from one stock. In order to extract the ticker for each of the companies, we simply need to extract the value of the key symbol. Finally, we append each of the symbols to a Python list. That is exactly what we achieve with below code. import requests import pandas as pd NetCurrentAssetValueperShare = {} querytickers = requests.get(f'https://financialmodelingprep.com/api/v3/search?query=&limit=100&exchange=NASDAQ') querytickers = querytickers.json() list_500 = querytickers stocks = [] count = 0 for item in list_500:     count = count +1     #Stop after storing 100 stocks     if count < 100:         stocks.append(item['symbol']) print(stocks) ['HRTX', 'GRIF', 'WAFU', 'VOD', 'TRMD', 'KTOV', 'HYXE', 'CLXT', 'TRMB', 'NBL', 'IGIB', 'CDMOP', 'VALX', 'IBTA', 'IBTE', 'FHK', 'IDXG', 'PIE', 'EMMA', 'IBTH', 'SGBX', 'SIFY', 'SUMR', 'TRVI', 'RNSC', 'PLUG', 'AGNC', 'BLUE', 'CENTA', 'BL', 'BSMO', 'ARCE', 'ARCB', 'ARCC', 'AEIS', 'AMTBB', 'CDLX', 'PFIE', 'BYND', 'RFEU', 'DFBH', 'TTD', 'TURN', 'CECE', 'COWN', 'PRPO', 'AXNX', 'BJRI', 'PLC'] Extracting Financial Statement Data with Python Now that we have the tickers for multiple companies, we can use them to extract Balance Sheet data for each of them. We will loop through each of the companies and make an http request to get: Current assets Total Liabilities Shares Outstanding The API end point takes as an argument the ticker of the company. We will pass it to the url in each loop iteration as {company}. Check the response obtained in the following link. Within the key financial, we have a list of dictionaries, we only want to keep the first element in the list [0] since it represents the most recent quarter. We can extract current assets and total liabilities by using the respective keys as shown in below code: for company in stocks:     Balance_Sheet = requests.get(f'https://financialmodelingprep.com/api/v3/financials/balance-sheet-statement/{company}?period=quarter')     Balance_Sheet = Balance_Sheet.json()     try:         total_current_assets = float(Balance_Sheet['financials'][0]['Total current assets'])         total_liabilities = float(Balance_Sheet['financials'][0]['Total liabilities'])         sharesnumber = requests.get(f'https://financialmodelingprep.com/api/v3/enterprise-value/{company}')         sharesnumber = sharesnumber.json()         sharesnumber = float(sharesnumber['enterpriseValues'][0]['Number of Shares'])                NCAVPS = (total_current_assets-total_liabilities)/sharesnumber         NetCurrentAssetValueperShare[company] = NCAVPS     except:         pass The number of shares outstanding can be extracted from a different API end point giving us information about the enterprise value of the company. Having all the required information, we can easily calculate the NCAVPS for each of the stocks and add it to the NetCurrentAssetValueperShare dictionary. Note that I use try and except so that in case an error is encountered during the API request process, the script will not be interrupted. Interpreting Net Current Asset Value per Share (NCAVPS) According to Benjamin Graham, investors should look for companies with stock prices trading at no more than 67% of its NCAV per share. The 67% represents a margin of safety since some of the current assets (i.e. Inventory) may not be converted to cash so easily. Therefore, we can achieve that in our script by obtaining the stock prices and comparing it with the NCAVPS. We will only add to our dictionary the stocks where the NCAVPS is 67% or less lower than the stock price. price = float(sharesnumber['enterpriseValues'][0]['Stock Price'])     if NCAVPS < 0.67 * price:      NetCurrentAssetValueperShare[company] = NCAVPS Wrapping Up Now, if we print our NetCurrentAssetValueperShare dictionary, we get below results: print(NetCurrentAssetValueperShare) {} Unfortunately, our script has returned an empty dictionary which means that currently there are no stocks in NASDAQ fulfilling our criteria. This makes sense since it is actually not common to find companies trading below its liquidation value. Feel free to search for stocks in other exchanges. You may be luckier than me and get back some companies. See below the script to calculate the Net Current Asset Value per Share with Python. Happy to continue the discussion in my Twitter account. import requests import pandas as pd NetCurrentAssetValueperShare = {} querytickers = requests.get(f'https://financialmodelingprep.com/api/v3/search?query=&limit=1000&exchange=NASDAQ') querytickers = querytickers.json() list_500 = querytickers stocks = [] count = 0 for item in list_500:     count = count +1     #Stop after storing 50 stocks     if count < 500:         stocks.append(item['symbol']) for company in stocks:     Balance_Sheet = requests.get(f'https://financialmodelingprep.com/api/v3/financials/balance-sheet-statement/{company}?period=quarter')     Balance_Sheet = Balance_Sheet.json()     try:         total_current_assets = float(Balance_Sheet['financials'][0]['Total current assets'])         total_liabilities = float(Balance_Sheet['financials'][0]['Total liabilities'])         sharesnumber = requests.get(f'https://financialmodelingprep.com/api/v3/enterprise-value/{company}')         sharesnumber = sharesnumber.json()         sharesnumber = float(sharesnumber['enterpriseValues'][0]['Number of Shares'])                NCAVPS = (total_current_assets-total_liabilities)/sharesnumber                 price = float(sharesnumber['enterpriseValues'][0]['Stock Price'])         #only companies where NCAVPS is below the stock price         if NCAVPS < 0.67 * price:             NetCurrentAssetValueperShare[company] = NCAVPS     except:         pass         NetCurrentAssetValueperShare Originally published at https://codingandfun.com on March 19, 2020. Towards Data Science A Medium publication sharing concepts, ideas, and codes. Follow 50 Finance Investment Programming Money Data Science 50 claps Written by Jose Manu (CodingFun) Follow Python for Finance. Learn step by step how to automate cool financial analysis tools. Writing at https://codingandfun.com/. Twitter: @CodingandF Follow Towards Data Science Follow A Medium publication sharing concepts, ideas, and codes. Follow Write the first response More From Medium More from Towards Data Science More from Towards Data Science from sklearn import * Conor Lazarou in Towards Data Science Mar 22 · 9 min read 2.5K More from Towards Data Science More from Towards Data Science Top 3 Python Functions You Don’t Know About (Probably) Dario Rade?i? in Towards Data Science Mar 14 · 4 min read 4.3K More from Towards Data Science More from Towards Data Science Don’t learn machine learning Caleb Kaiser in Towards Data Science Mar 19 · 4 min read 2.4K Discover MediumWelcome to a place where words matter. On Medium, smart voices and original ideas take center stage - with no ads in sight. Watch Make Medium yoursFollow all the topics you care about, and we’ll deliver the best stories for you to your homepage and inbox. Explore Become a memberGet unlimited access to the best stories on Medium — and support writers while you’re at it. Just $5/month. Upgrade AboutHelpLegal
