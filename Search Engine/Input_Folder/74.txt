https://towardsdatascience.com/its-time-to-familiarize-yourself-with-nosql-databases-more-than-ever-5fb1f65c22b1?source=collection_category---4------3-----------------------
It’s Time to Familiarize Yourself With NoSQL Databases More Than Ever Sign in Data Science Machine Learning Programming Visualization AI Video About Contribute It’s Time to Familiarize Yourself With NoSQL Databases More Than Ever SQL vs NoSQL: the difficult choice of the right database (and how to do it right) Kamal Chouhbi Follow Mar 27 · 14 min read Photo by Kaleidico on Unsplash Data is at the heart of the information system. The efficiency of its organization and its operation is a major concern for any company. At the time of Big Data, the business expertise and understanding the existing technical solutions is very essential. The technological landscape is evolving very quickly and companies must at the same time continue to assess and choose the databases that will meet their future needs and support their growth. Relational databases have been used for decades to store data, and they still represent a viable solution for many use cases. NoSQL databases were created in response to the limitations of relational database technology. Compared to relational databases, NoSQL databases are more scalable and offer higher performance, and their data model corrects several weaknesses of the relational model. In this article, I will try to throw light on the challenges, benefits and process of migrating from a RDBMS to NoSQL. In general, NoSQL databases were designed to solve the problems of data processing in volume, multi-sources and multi-formats, in Big Data environments. They offer a new approach to meet volume requirements and new types of data. Nowadays, the number of NoSQL databases has become more and more important. It is imperative to know their differences to adopt the right technology for the right application. 1. INTRODUCTION - SQL : SQL is the acronym for Structured Query Language. It has been known for a long time to all IT engineers who have had to quickly search for information in large relational databases (DBMS). SQL is widely used today because it is one of the most structured and fastest database organization and querying devices; it comes in different names which show that there are various adaptations, such as Oracle’s MySQL and Microsoft’s SQL Server. In addition, SQL is the most recommended option by many companies due to its predefined structure and schemas. - NoSQL : The acronym “NoSQL” has two interpretations which are not clear-cut today: For some it is “No SQL”, that is to say, the use of another query language different from SQL. For the others, it is “Not Only SQL”, but that is also to say, the combined use of SQL with other information retrieval tools. So the term relates as much to technical characteristics as to a historic generation of DBMS that emerged around the 2010s. The main problem that led to inventing NoSQL was to solve the fact that the same database on a website could be used at the same time worldwide by millions of users; the typical problem of a company like Amazon… What we are therefore trying to achieve with NoSQL is to reduce the complexity of the query language and to simplify the architecture of the database. These databases consist of column-oriented, document-oriented, graph-oriented and key / value-oriented data. The NoSQL family is made up of various products, each product has a unique set of functionalities. - Main Differences : SQL databases have a predefined schema while NoSQL databases have a dynamic schema for unstructured data. SQL databases are scalable vertically, while NoSQL databases are scalable horizontally. SQL databases are scaled by increasing the power of the hardware like CPU, RAM or SSD. The databases NoSQL are scaled by increasing the number of data servers to reduce the load. It’s like adding more floors to the same building versus adding more buildings to the neighborhood. SQL databases are table-based databases while NoSQL databases are databases based on key-value pairs. This means that SQL databases represent data in the form of tables composed of a certain number of rows that represents the data, while NoSQL databases are the collection of key-value pairs, of documents, of graphical databases, etc. SQL databases use SQL (structured query language) to define and manipulate data, which is very powerful. In the NoSQL database, queries focus on document collection. Sometimes it is also called UnQL (Unstructured Query Language). The syntax for using UnQL varies greatly between the different existing NoSQL databases. 2. HISTORICAL ELEMENTS Source : Photo by National Cancer Institute on Unsplash Historical domination of relational DBMS The relational DBMS created in the 1970s has gradually imposed itself until it became the very widely dominant database paradigm in the early 1990s. During the 1990s, many salespeople in logistics companies started using it to store their business data. Actually, they had neither a mouse nor a user interface to search for certain information stored on servers often distant and connected by specialized lines: they were used to enter SQL commands with the keyboard and were able to retrieve relevant information about the availability of a particular product or raw material in seconds. Several other database models have emerged, like the DBMS Object-oriented , Hierarchical DBMS , Object-relational DBMS , but their use has been very limited. Starting from the 2000s, with the development of large internet companies (Amazon, eBay, Google …), huge amounts of unstructured data appeared and was growing far more rapidly than structured data that it did not fit the relational schemas of the RDBMS anymore. There was also a development of clustered computing, thus the domination of the relational model was questioned because it had some prohibitive limits for these new practices. Pioneers of the NoSQL model The large web companies had to process very large volumes of data, that is why they were the first to face the intrinsic limitations of traditional relational DBMS. These systems, based on a strict application of ACID properties (atomicity, consistency, isolation, durability) and generally designed to run on single computers, quickly posed problems of scalability. In order to meet these limits, these companies have started to develop their own database management systems which can operate on distributed hardware architectures and which can process a large volume of data : Google ( BigTable ), Amazon ( DynamoDB ), LinkedIn ( Voldemort ), Facebook ( Cassandra then HBase ), Baidu ( Hypertable ) Performance remains good with the ramp-up by simply multiplying the number of servers, a reasonable solution with the drop in costs, in particular, if revenues grow with the development of the activity. 3. Popular Databases There are several popular databases systems available; both paid and free. In order to choose the right management system for you or your organization, it is important to have an idea about what exists in the market. Check out the list below of 5 popular SQL & NoSQL databases. - SQL Databases Products: 1- MySql: It’s available for free and it offers a lot of functionality even for a free database engine. Source : https://www.mysql.com/ 2- Oracle: Oracle database management tools are incredibly robust with the latest innovations and features. Source : https://www.oracle.com/database/ 3- Postgres: This database management engine is scalable and can handle terabytes of data, with a variety of predefined functions. Source : https://www.postgresql.org/ 4- SQL Server: It is very fast and stable. It works very well with other Microsoft products. Source : https://www.microsoft.com/en-us/sql-server/sql-server-2019 5- SQLite: A SQLite database is very light and quick to set up, it can also be used to store data in a real database on a smartphone application (iPhone or Android). Source : https://www.sqlite.org/index.html - NoSQL Databases Products: 1- MongoDB: MongoDB is a flexible/reliable database that will draw you to the NoSQL world. Its management and maintenance are very easy and fast. Source : https://www.mongodb.com/ 2- Redis: It is incredibly simple and straightforward to use. You can download Redis and start using it during the next five minutes. Source : https://redis.io/ 3- Cassandra: The linear scalability provided by Cassandra, allowing to easily scale up/down the cluster by simply adding/removing the servers. Source : http://cassandra.apache.org/ 4- Hbase: It is a column oriented database that helps improve the query performance and aggregations. Source: https://hbase.apache.org/ 5- CouchDb: Thanks to its ability to store serialized (JSON formatted) unstructured data and its Restful HTTP API, CouchDB is highly desirable for Web and Mobile Applications. Source : https://couchdb.apache.org/ 4. NoSQL Database Designs The main characteristics of NoSQL DBMS are to allow the manipulation of large volumes of data and to allow horizontal scalability. However, the difficulty, which most of the companies face today, is to target the most adequate technology in order to respond to their problems and their application. Addressing this difficulty begins with a good understanding of the different types of NoSQL databases. There is a common myth that all NoSQL databases are created equal — this is not true! In fact, these databases can be classified into four categories: document-oriented databases, key/value databases, column databases and graph-oriented databases. They all have one thing in common: the support of more flexible and dynamic models than those produced with traditional relational databases. In fact, each of these categories has its own attributes and limitations. There is no preferable database for solving all problems. You must select a database according to the needs of your project. You have to wonder what kind of data will be manipulated and how the applications will ultimately use it. - Document-oriented databases: Mixed Structure A document-oriented NoSQL database stores and extracts data as a key/value pair, but the value part is stored as a document. The document is stored in JSON or XML formats. MongoDB, Apache CouchDB, MarkLogic are document-oriented databases. - Key / value databases: A key-value oriented database has a large hash of keys and values. It represents the simplest form of NoSQL databases. They associate unique keys with values ??in data, with the objective of greatly enhancing the performance of applications based on relatively simple datasets. Redis, Riak, Memcached and Aerospike are examples of key-value databases. - Column databases: Column databases hold data in tables that have a very large number of columns. Each storage block contains data from a single column and each column is treated separately. They provide high performance on aggregate queries such as COUNT, SUM, AVG, MAX, etc., because the data is readily available in a column. HBase, Cassandra and Accumulo are examples of column-based databases. - Graph-oriented databases: A graph-based database is a network database that stores data elements in “graph” structures and make it possible to create associations between the nodes, ultimately serving as a basis for recommendation engines or social networks. We can get a lot of information from a graph database. For example, graph technology can be used to identify relationships between different people through their interests. Twitter Graph | Source : https://neo4j.com/blog/oscon-twitter-graph/ Neo4J, Infinite Graph and FlockDB are examples of graph-oriented databases. 4. 5 Criteria for choosing the adequate type of database for your application How do we decide which type of Database is the best fit for a project ? Here is a checklist that you can use : The type of data to be stored : SQL databases are not suitable for hierarchical data storage. However, the NoSQL database is better suited for hierarchical data storage because it follows the key-value pair method or graph method. NoSQL databases are highly preferred for large data sets. Complex queries : SQL databases are perfectly suited to the environment requiring many queries, while NoSQL databases are not suitable for complex queries. So the queries in NoSQL are not as powerful as the SQL query language. Scalability : In most situations, SQL databases are vertically scalable. You can manage the increased load by increasing the processor, RAM, SSD, etc. on a single server. On the other hand, NoSQL databases are scalable horizontally. You can simply add a few additional servers easily to your NoSQL database infrastructure to handle heavy traffic. So you can choose the type of database that will suits you depending on your equipments. Highly transactional applications : SQL databases are better suited to transactional type applications for intensive use, because they are more stable and promise atomicity as well as data integrity. Although you can use NoSQL for transactional purposes, it is still not comparable but can be used for complex transactional applications. Properties : SQL databases emphasize ACID properties (Atomicity, Consistency, Isolation, Durability), while the NoSQL database follows the Brewers CAP theorem (Consistency, Availability and Partition Tolerance). 5. Switch from RDBMS to NoSQL Photo by Science in HD on Unsplash No matter which NoSQL database design you choose, migrating your data into it can present some serious challenges. The design of a data model in NoSQL has additional complexity because it requires knowing the end use of the data. Knowing that your application will handle Bills and Customers is no longer sufficient. You must now know how this data will be displayed to the end user. Therefore, data modeling in a NoSQL database requires real technical expertise in addition to in-depth knowledge of the end-customer use. Is it time to replace SQL with a NoSQL solution ? In my opinion, this is a hard question! Because in most cases, it’s not about replacing SQL with a NoSQL solution, but rather, making a transition from one to the other, if the application and the use case reveal the need for change. In general, this transition will be driven by the need for flexibility and scalability when it comes to building modern web and mobile applications. Typically, many companies try to support the load in their web applications, so they choose to simply add web servers behind a load balancer to support more users. Undoubtedly, the ability to scale up is a fundamental competitive advantage in the increasingly important world of cloud computing, in which instances of virtual machines can be easily added or removed so as to meet the fluctuating demands. Relational databases (RDBMS) do not allow simple scaling and do not provide a flexible data model. Managing more users means adding a larger server and large servers are very complex and expensive, unlike low-cost hardware, “commodity hardware” and cloud architectures. Organizations are starting to see performance issues with their relational databases for existing or new applications. Especially as the number of users increases daily, they realize that the need for a faster and more flexible database has become very important. It’s time to move to NoSQL! What would be the main steps required for the transition from SQL to NoSQL? Applications / Projects can vary greatly depending on each organization, so the transition will depend on your use case. Here are some general guidelines for the transition: 1- Understand the key requirements for your application: Here are some requirements corresponding to the need to have a NoSQL database: Rapid application development: Changing market needs & Continuing modification of data Scalability Constant performance: Low response time for a better user experience Operating reliability: High availability to manage errors with minimal impact on the application & Integrated monitoring APIs for better maintenance 2- Understand the different types of NoSQL offers: As I’ve said above, there are different types of NoSQL database management systems. For instance, the document-oriented NoSQL databases — with Couchbase and MongoDB which are the two best known and most widely adopted examples. Also, Cassandra, for example, may be a solution that you can use for data analysis given its columnar model. Neo4j, a graph database, can be the perfect database for applications that need to store relationships between entities. 3- Build a prototype: Once you have narrowed down the possible choices for the type of database, try to develop a prototype integrating the main characteristics of your application. This prototype will help you evaluate the response times, the performance in terms of throughput and the capacity to scale up easily. 4- Document modeling and development: For document-oriented databases, spend a few days on modeling your data starting from fixed tabular diagrams to arrive at flexible document models. 5- Deployment then production: Operational stability is a very important aspect for interactive web applications. Test and re-test your deployment as you would for applications that normally use traditional RDBMS systems. 6- Keep up with the latest trends: Today, there is a plethora of quality training that offers hands-on courses for training on NoSQL. The best way to ensure a successful implementation of NoSQL is to be up to date on the latest versions. Don’t worry, you will find it easy to adopt certain NoSQL technologies, especially if you are familiar with JSON for document format. Developers who use SQL extensively may need to adapt and learn document modeling approaches. Rethinking how data can be structured logically using documents rather than normalizing data into a fixed database schema becomes an important aspect. Here are links to some interesting courses: NoSQL Courses & Tutorials (Udemy) NoSQL Systems (Coursera) 6. Conclusion The objective of this article was therefore to present the main differences that exist to help you make the right decision and shape the future of your information system (or your simple application). We have seen that SQL and NoSQL databases ultimately do almost the same thing (store data) but in different ways. The choice of a database management system (DBMS) is therefore an important and structuring moment for any data project. Of course, it is always possible to choose an option and then switch to another later. But a little bit of conceptual analysis and thinking at the start of a project will make you save time and money. The market today is full of NoSQL databases — I think we are faced with two or three of them every day, because there are a lot of advantages for a developer to switch to NoSQL. A more flexible data model and freedom from rigid schemas is a big advantage. You can also see significantly improved performance and the ability to scale horizontally. But most NoSQL products are still in the early stages of the product cycle. For features such as complex joins, developers may prefer using a traditional RDBMS. And for some projects, a hybrid approach might be the best choice. To conclude, each company will have its own preferences depending on the requirements of the project. So determine your needs and the database that judiciously provides integrated support for the development of your project. Congratulations if you managed to get here. Thanks for reading, I hope you’ve liked it. For personal contact or discussion, feel free to reach out to me on LinkedIn. References : SQL vs. NoSQL: How Are They Different and What Are the Best SQL and NoSQL Database Systems? Migrating from a relational to a NoSQL cloud database SQL vs NoSQL or MySQL vs MongoDB Towards Data Science A Medium publication sharing concepts, ideas, and codes. Follow 19 Sql NoSQL Database Data Science Data 19 claps Written by Kamal Chouhbi Follow Masters student (Major in Data Analytics) https://github.com/chouhbik || https://www.linkedin.com/in/kamal-chouhbi Follow Towards Data Science Follow A Medium publication sharing concepts, ideas, and codes. Follow Write the first response More From Medium More from Kamal Chouhbi More from Kamal Chouhbi Coronavirus (COVID-19): 3 Tips to Ensure Efficiency in Teleworking Kamal Chouhbi in The Startup Mar 18 · 8 min read 57 Also tagged Data Science Also tagged Data Science Advanced Streamlit Caching Rahul Agarwal in Towards Data Science Mar 27 · 6 min read 71 Also tagged Sql Also tagged Sql How GIN Indices Can Make Your Postgres Queries 15x Faster Chris in Towards Data Science Mar 27 · 3 min read 22 Discover MediumWelcome to a place where words matter. On Medium, smart voices and original ideas take center stage - with no ads in sight. Watch Make Medium yoursFollow all the topics you care about, and we’ll deliver the best stories for you to your homepage and inbox. Explore Become a memberGet unlimited access to the best stories on Medium — and support writers while you’re at it. Just $5/month. Upgrade AboutHelpLegal
